#parser
cwl.parser.fail.to.process=Failed to process CWL description file "{0}", {1}.
cwl.parser.fail.to.process.inputsettings=Failed to process CWL input settings file "{0}", {1}.
cwl.parser.fail.to.process.exec.config=Failed to process CWL execution configuration file "{0}", {1}.
cwl.parser.fail.to.bind.value=Failed to bind value for [{0}], {1}.
cwl.parser.field.required=The field [{0}] is required.
cwl.parser.field.required.in=The field [{0}] is required by [{1}].
cwl.parser.field.unsupported=The field [{0}] with "{1}" is not supported.
cwl.parser.invalid.field=The field [{0}] is not valid, {1}
cwl.parser.invalid.type=The variable type of the field [{0}] is not valid, "{1}" is required.
cwl.parser.invalid.array.type=The type of element in array [{1}] is not valid.
cwl.parser.invalid.scatter.method=The field ScatterMethod "{0}" is not valid.
cwl.parser.requirement.required=[{0}] is a requirement for the workflow or step [{1}].
cwl.parser.graph.main.required=The CWL document, which contains a graph of multiple processes, must specify a main process.
cwl.parser.graph.array.required=The $graph field must be an array of objects.
cwl.parser.remote.file.location.unsupported=Remote location is not supported.

#docker
cwl.docker.imageId.required=[dockerImageId] or [dockerPull] is required by step [{0}].

#javascript expression
cwl.expression.evaluate.failed=Failed to evaluate the expression "{0}": {1}
cwl.expression.evaluate.failed.with.wrong.result=Failed to evaluate the expression "{0}" in the [{1}] field, {2} is required.
cwl.expression.command.line.binding.valuefrom.invalid=The CommandLineBinding valueFrom expression must return a bool, string, number, or corresponding array.
cwl.expression.envvarreq.invalid=The EnvironmentDef expression must return a bool, string, or number.
cwl.expression.resreq.invalid=The ResourceRequirement field is not valid, [{0}] is greater than [{1}].
cwl.expression.InitialWorkDirReq.listing.invalid=Failed to evaluate the expression "{0}" in [InitialWorkDirRequirement#listing]
cwl.expression.InitialWorkDirReq.listing.type.invalid=Failed to evaluate the expression "{0}" in [InitialWorkDirRequirement#listing], the expression must return a File, Directory or corresponding array.
cwl.expression.InitialWorkDirReq.listing.path.invalid=Failed to evaluate the expression "{0}" in [InitialWorkDirRequirement#listing], the "{1}" does not exist.
cwl.expression.InitialWorkDirReq.entry.name.invalid=Failed to evaluate the expression "{0}" in [InitialWorkDirRequirement#entryname], the expression must return a string.
#io
cwl.io.mkdir.failed=Failed to create the "{0}" directory with {1}: {2}
cwl.io.copy.failed=Failed to copy "{0}" to "{1}": {2}
cwl.io.file.unaccessed=The file "{0}" cannot be accessed.
cwl.io.file.unaccessed.with.type=The {0} file "{1}" cannot be accessed.
cwl.io.file.invalid.ext=The file "{0}" has the wrong file extension "{1}": "{2}" is expected.
cwl.io.file.invalid.path=The file "{0}" has an invalid path.
cwl.io.file.not.exist=The file "{0}" does not exist.
cwl.io.read.failed=Failed to read file "{0}": {1}
cwl.io.write.failed=Failed to write file "{0}": {1}

#output
cwl.output.value.not.found=Cannot find the output value in [{0}]
cwl.output.value.match.failed=There are too many {0} matched with "{1}" in "{2}"
cwl.output.value.not.match=There are no {0} matched with "{1}" in "{2}"
cwl.output.value.json.parse.error=Failed to parse the "{0}"
cwl.output.value.not.found.from.json=Failed to find the output value for ({0}) from "{1}"
cwl.output.value.not.found.bytype.from.json=Failed to get the output value for ({0}) with the type <{1}> from "{2}"

#workflows
cwl.workflow.id=Workflow ID: {0}
cwl.workflow.name=Name: {0}
cwl.workflow.description.file.path=Description file path: {0}
cwl.workflow.input.settings.file.path=Input settings file path: {0}
cwl.workflow.exec.configuration.file.path=Execution configuration path: {0}
cwl.workflow.outdir=Output directory: {0}
cwl.workflow.workdir=Work directory: {0}
cwl.workflow.start=Workflow "{0}" started to execute.
cwl.workflow.step.not.found=The workflow step ({0}) cannot be found.
cwl.workflow.step.input.not.found=The input ({0}) of step ({1}) cannot be found.
cwl.workflow.step.not.resolved=Failed to resolve the step ({0}) dependencies.
cwl.workflow.input.not.found=The input ({0}) of process ({1}) at step ({2}) cannot be found.
cwl.workflow.output.not.found=The output ({0}) of process ({1}) at step ({2}) cannot be found.
cwl.workflow.output.not.resolved=The output ({0}) of step ({1}) cannot be resolved.
cwl.workflow.not.found=There is no workflow with ID "{0}".
cwl.unfinished.workflows.not.found=There are no unfinished workflows.

#rerun
cwl.exec.workflow.not.found=The workflow ({0}) cannot be found.
cwl.exec.workflow.not.exited=The workflow ({0}) is {1}.
cwl.exec.workflow.rerun.start=The workflow \"{0}\" ({1}) started to rerun
cwl.exec.workflow.rerun.tip=The workflow has running jobs. Do you want to kill them before rerunning the workflow? (Y/N)
cwl.exec.workflow.rerun.kill.job=Killing the job ({0}) <{1}>

#runtime messages
cwl.exec.command.failed=Failed to execute command: {0}, {1}
cwl.exec.command.execute.timeout=The command timed out.
cwl.exec.job.start=Started job ({0}) with\n{1}
cwl.exec.job.prestart=Pre-submitted job ({0}) with a placeholder command:\n{1}
cwl.exec.job.start.failed=Failed to submit the step {0}, {1}
cwl.exec.job.submitted=Job ({0}) was submitted. {1}
cwl.exec.job.has.done=The step ({0}) is done.
cwl.exec.scatter.job.scatter=The step ({0}) scatter of {1} jobs by {2}.
cwl.exec.scatter.job.scatter.without.method=The step ({0}) scatter of {1} jobs.
cwl.exec.scatter.job.start=Started job ({0}_{1}) with\n{2}
cwl.exec.scatter.job.start.failed=Failed to submit scatter step ({0}), {1}
cwl.exec.scatter.job.submitted=Job ({0}_{1}) was submitted. {2}
cwl.exec.scatter.gather.job.start=Start a gather job for scatter step ({0}).
cwl.exec.scatter.gather.job.submitted=Scatter gather job ({0}) was submitted. {1}
cwl.exec.scatter.job.fill.command=Fill out the scatter gather result in the script {0}
cwl.exec.job.start.wait=Started to wait for jobs by\n{0}
cwl.exec.job.wait.failed=Failed to wait for job {0} <{1}>, {2}
cwl.exec.job.bwait.failed=The bwait command failed to execute (exitCode={0}, exitMsg={1})
cwl.exec.job.fill.command=Fill out commands in the script {1}:\n{0}
cwl.exec.job.resume=Resuming job ({0}) <{1}> with\n{2}
cwl.exec.job.done=The job ({0}) <{1}> is done with stdout from LSF:\n{2}
cwl.exec.workflow.done=The workflow ({0}) is done.
cwl.exec.job.capture.outputs=Failed to capture output for job ({0}): {1}
cwl.exec.workflow.capture.outputs=Failed to capture output for workflow ({0}): {1}
cwl.exec.job.kill=killing waiting job ({0}) <{1}>.
cwl.exec.job.start.recovery=Failed to wait for job <{0}>. Attempting to recover by executing the post failure script.
cwl.exec.job.retry=Retry attempt {0}/{1}
cwl.exec.job.recovery.success=Recovered successfully.
cwl.exec.job.postscript.notexist=Post failure script "{0}" does not exist.
cwl.exec.job.postscript.exited=Post failure script "{0}" exited with <{1}>: {2}
cwl.exec.job.exited=The job ({0}) exited.
cwl.exec.workflow.exited=The workflow ({0}) exited with <{1}>.

#command exception messages
cwl.outputdir.empty=Error: The output directory is not specified
cwl.outputdir.nonexistent=Error: The output directory "{0}" does not exist
cwl.workdir.empty=Error: The working directory is not specified
cwl.workdir.nonexistent=Error: The working directory "{0}" does not exist
cwl.configuration.empty=Error: The workflow execution configuration file is unspecified
cwl.configuration.nonexistent=Error: The workflow execution configuration file "{0}" does not exist
cwl.command.arg.not.allowed.with=Error: argument --preserve-environment not allowed with argument --preserve-entire-environment\n
cwl.command.no.input=Error: CWL document required, no input file was provided\n
cwl.envvar.name.invalid=Error: The ENVVAR name "{0}" is invalid
cwl.envvar.not.found=Error: The ENVVAR with name "{0}" does not exist
cwl.unexpected.exception=Error: Failed to run workflow, {0}
cwl.databasedir.nonexistent=Error: The database directory "{0}" does not exist
cwl.databasedir.cannot.accessed=Error: The database directory "{0}" cannot be accessed

#command message
cwl.command.column.id=ID
cwl.command.column.name=Name
cwl.command.column.submit.time=Submit Time
cwl.command.column.start.time=Start Time
cwl.command.column.end.time=End Time
cwl.command.column.state=State
cwl.command.column.exit.code=Exit Code
cwl.command.column.work.dir=Work Dir
cwl.command.column.output.dir=Output Dir
cwl.command.column.desc.path=CWL File
cwl.command.column.input.settings=Inputsettings Files
cwl.command.column.exec.configuration=Configuration File
cwl.command.help.option=Display this help message and exit
cwl.command.workdir.option=Absolute path to directory where intermediate files\n\
                        generated during the cwlexec run. Intermediate\n\
                        files and folders will be placed in a directory\n\
                        <workflowID> within workDir. The intermediate\n\
                        files are needed when rerun a workflow, this directory\n\
                        must be located in a shared file system.\n\
                        Default is {0}.
cwl.command.output.option=Absolute path to directory where the outputs files\n\
                          generated during the cwlexec run. Outputs\n\
                          files and folders will be placed in a directory\n\
                          <workflowID> within outputDir. \n\
                          Default is {0}.
cwl.command.config.option=The path to workflow execution configuration.
cwl.command.version.option=Display version information and exit.
cwl.command.linkinput.option=Do not copy input files to workdir, just create symbolic\n\
                             link for them.
cwl.command.logger.option=Print execution debug messages.
cwl.command.rerun.option=Rerun an exited workflow.
cwl.command.quiet.option=Only print warnings and errors.
cwl.command.list.option=List the executed workflows or using -l <workflowID>\n\
                        to show detailed information for each workflow in a multiline format.
cwl.command.preserve.all.env.option=Preserve all environment variable when running CommandLineTools.
cwl.command.preserve.env.option=Preserve specific environment variable when running \n\
                                CommandLineTools. May be provided multiple times.
cwl.command.usage=\
cwlexec [-h] [-v] [-l | -l WORKFLOW_ID] [-L] [-p | -pe ENVVAR_NAME] [-q | -X] [-r WORKFLOW_ID]\
\t [-db DATABASEBDIR] [-c EXEC_CONFIG] [-w WORKDIR] [-o OUTDIR] [workflow] ...\n\n\
options:\n\
